import logging

from .threadlocal import _ThreadLocalDictWrapper


class BoundLogger:
    _context = _ThreadLocalDictWrapper
    def error(self, event: str = None, *args, **kw): ...
    def exception(self, event: str = None, *args, **kw): ...
    def info(self, event: str = None, *args, **kw): ...
    def warning(self, event: str = None, *args, **kw): ...
    def debug(self, event: str = None, *args, **kw): ...
    def critical(self, event: str = None, *args, **kw): ...
    def log(self, event: str = None, *args, **kw): ...
    def bind(self, **new_values): ...
    def unbind(self, *keys: str): ...
    def new(self, **new_values): ...
    def _proxy_to_logger(self, method_name, event, *event_args, **event_kw): ...
    def setLevel(self, level): ...
    def findCaller(self, stack_info=False): ...
    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None): ...
    def handle(self, record): ...
    def addHandler(self, hdlr): ...
    def removeHandler(self, hdlr): ...
    def hasHandlers(self): ...
    def callHandlers(self, record): ...
    def getEffectiveLevel(self): ...
    def isEnabledFor(self, level): ...
    def getChild(self, suffix): ...
    warn = warning
    fatal = critical


class ProcessorFormatter:
    def __init__(
            self,
            processor,
            foreign_pre_chain=None,
            keep_exc_info=False,
            keep_stack_info=False,
            *args,
            **kwargs
    ): ...

    def format(self, record): ...
    def wrap_for_formatter(logger, name, event_dict): ...

class _FixedFindCallerLogger(logging.Logger):
    def findCaller(self, stack_info=False): ...

class LoggerFactory:
    def __init__(self, ignore_frame_names=None): ...

class PositionalArgumentsFormatter:
    def __init__(self, remove_positional_args=True): ...

def filter_by_level(logger, name, event_dict): ...
def add_log_level_number(logger, method_name, event_dict): ...
def render_to_log_kwargs(wrapped_logger, method_name, event_dict) -> dict: ...
def add_log_level(logger: str, method_name: str, event_dict: dict) -> dict: ...
def add_logger_name(logger: str, method_name: str, event_dict: dict) -> dict: ...

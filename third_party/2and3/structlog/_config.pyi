from ._generic import BoundLogger

class _Configuration: ...


def configure_once(*args, **kw): ...
def is_configured() -> bool: ...
def get_config(): ...
def get_logger(*args, **initial_values) -> BoundLogger: ...
getLogger = get_logger
def reset_defaults(): ...
def wrap_logger(logger, processors=None, wrapper_class=None, context_class=None, cache_logger_on_first_use=None,
                logger_factory_args=None, **initial_values): ...
def configure(processors=None, wrapper_class=None, context_class=None, logger_factory=None, cache_logger_on_first_use=None): ...


class BoundLoggerLazyProxy:
    def __init__(
        self,
        logger,
        wrapper_class=None,
        processors=None,
        context_class=None,
        cache_logger_on_first_use=None,
        initial_values=None,
        logger_factory_args=None,
    ): ...
    def bind(self, **new_values): ...
    def unbind(self, *keys): ...
    def new(self, **new_values): ...
